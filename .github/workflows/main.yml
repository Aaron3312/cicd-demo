name: CI/CD Pipeline

on:
  push:
    branches: [main]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
          
      # Create proper Maven directory structure
      - name: Create Maven directory structure
        run: |
          mkdir -p src/main/java/com/cicdemo
          mkdir -p src/test/java/com/cicdemo
          
          # Create Main.java file
          cat > src/main/java/com/cicdemo/Main.java << 'EOL'
package com.cicdemo;

import com.sun.net.httpserver.HttpServer;
import com.sun.net.httpserver.HttpHandler;
import com.sun.net.httpserver.HttpExchange;

import java.io.IOException;
import java.io.OutputStream;
import java.net.InetSocketAddress;

public class Main {
    public static void main(String[] args) throws IOException {
        HttpServer server = HttpServer.create(new InetSocketAddress(8080), 0);
        server.createContext("/", new RootHandler());
        server.setExecutor(null);
        server.start();
        System.out.println("Server started on port 8080");
    }

    static class RootHandler implements HttpHandler {
        @Override
        public void handle(HttpExchange exchange) throws IOException {
            String response = "Hello World! CIDCDemo";
            exchange.sendResponseHeaders(200, response.length());
            OutputStream os = exchange.getResponseBody();
            os.write(response.getBytes());
            os.close();
        }
    }
}
EOL
          
          # Create MainTest.java file
          cat > src/test/java/com/cicdemo/MainTest.java << 'EOL'
package com.cicdemo;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertTrue;

public class MainTest {
    
    @Test
    public void testDummy() {
        // Simple test that always passes
        assertTrue(true, "This test should always pass");
    }
}
EOL
      
      - name: Build with Maven and run tests
        run: mvn -B package --file pom.xml
      
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      # Create Dockerfile
      - name: Create Dockerfile
        run: |
          cat > Dockerfile << 'EOL'
FROM openjdk:17

WORKDIR /app

# Copy the jar file built by Maven
COPY target/java-cicd-demo-1.0-SNAPSHOT.jar /app/app.jar

EXPOSE 8080

CMD ["java", "-jar", "app.jar"]
EOL

      - name: Build, tag, and push image to DockerHub
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          IMAGE_NAME: my-java-image
        run: |
          docker build -t $DOCKERHUB_USERNAME/$IMAGE_NAME .
          docker push $DOCKERHUB_USERNAME/$IMAGE_NAME:latest