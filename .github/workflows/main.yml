name: CI/CD Pipeline

on:
  push:
    branches: [main]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
          
      # Create proper Maven directory structure
      - name: Create Maven directory structure
        run: |
          mkdir -p src/main/java/com/cicdemo
          mkdir -p src/test/java/com/cicdemo
      
      # Create Main.java file
      - name: Create Main.java
        run: |
          cat > src/main/java/com/cicdemo/Main.java << 'EOF'
          package com.cicdemo;
          
          import com.sun.net.httpserver.HttpServer;
          import com.sun.net.httpserver.HttpHandler;
          import com.sun.net.httpserver.HttpExchange;
          
          import java.io.IOException;
          import java.io.OutputStream;
          import java.net.InetSocketAddress;
          
          public class Main {
              public static void main(String[] args) throws IOException {
                  HttpServer server = HttpServer.create(new InetSocketAddress(8080), 0);
                  server.createContext("/", new RootHandler());
                  server.setExecutor(null);
                  server.start();
                  System.out.println("Server started on port 8080");
              }
          
              static class RootHandler implements HttpHandler {
                  @Override
                  public void handle(HttpExchange exchange) throws IOException {
                      String response = "Hello World! CIDCDemo";
                      exchange.sendResponseHeaders(200, response.length());
                      OutputStream os = exchange.getResponseBody();
                      os.write(response.getBytes());
                      os.close();
                  }
              }
          }
          EOF
      
      # Create MainTest.java file
      - name: Create MainTest.java
        run: |
          cat > src/test/java/com/cicdemo/MainTest.java << 'EOF'
          package com.cicdemo;
          
          import org.junit.jupiter.api.Test;
          import static org.junit.jupiter.api.Assertions.assertTrue;
          
          public class MainTest {
              
              @Test
              public void testDummy() {
                  // Simple test that always passes
                  assertTrue(true, "This test should always pass");
              }
          }
          EOF
      
      # Create pom.xml file
      - name: Create pom.xml
        run: |
          cat > pom.xml << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <project xmlns="http://maven.apache.org/POM/4.0.0"
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
              <modelVersion>4.0.0</modelVersion>
          
              <groupId>com.cicdemo</groupId>
              <artifactId>java-cicd-demo</artifactId>
              <version>1.0-SNAPSHOT</version>
          
              <properties>
                  <maven.compiler.source>17</maven.compiler.source>
                  <maven.compiler.target>17</maven.compiler.target>
                  <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
              </properties>
          
              <dependencies>
                  <!-- JUnit Jupiter API for writing tests -->
                  <dependency>
                      <groupId>org.junit.jupiter</groupId>
                      <artifactId>junit-jupiter-api</artifactId>
                      <version>5.9.2</version>
                      <scope>test</scope>
                  </dependency>
                  <!-- JUnit Jupiter Engine to run tests -->
                  <dependency>
                      <groupId>org.junit.jupiter</groupId>
                      <artifactId>junit-jupiter-engine</artifactId>
                      <version>5.9.2</version>
                      <scope>test</scope>
                  </dependency>
              </dependencies>
          
              <build>
                  <plugins>
                      <plugin>
                          <groupId>org.apache.maven.plugins</groupId>
                          <artifactId>maven-compiler-plugin</artifactId>
                          <version>3.11.0</version>
                          <configuration>
                              <source>17</source>
                              <target>17</target>
                          </configuration>
                      </plugin>
                      <plugin>
                          <groupId>org.apache.maven.plugins</groupId>
                          <artifactId>maven-surefire-plugin</artifactId>
                          <version>3.0.0</version>
                      </plugin>
                      <plugin>
                          <groupId>org.apache.maven.plugins</groupId>
                          <artifactId>maven-jar-plugin</artifactId>
                          <version>3.3.0</version>
                          <configuration>
                              <archive>
                                  <manifest>
                                      <addClasspath>true</addClasspath>
                                      <mainClass>com.cicdemo.Main</mainClass>
                                  </manifest>
                              </archive>
                          </configuration>
                      </plugin>
                      <plugin>
                          <groupId>org.apache.maven.plugins</groupId>
                          <artifactId>maven-shade-plugin</artifactId>
                          <version>3.4.1</version>
                          <executions>
                              <execution>
                                  <phase>package</phase>
                                  <goals>
                                      <goal>shade</goal>
                                  </goals>
                              </execution>
                          </executions>
                      </plugin>
                  </plugins>
              </build>
          </project>
          EOF
      
      - name: Build with Maven
        run: mvn -B package --file pom.xml
      
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      # Create Dockerfile
      - name: Create Dockerfile
        run: |
          cat > Dockerfile << 'EOF'
          FROM openjdk:17
          
          WORKDIR /app
          
          # Copy the jar file built by Maven
          COPY target/java-cicd-demo-1.0-SNAPSHOT.jar /app/app.jar
          
          EXPOSE 8080
          
          CMD ["java", "-jar", "app.jar"]
          EOF
      
      - name: Build, tag, and push image to DockerHub
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          IMAGE_NAME: my-java-image
        run: |
          docker build -t $DOCKERHUB_USERNAME/$IMAGE_NAME .
          docker push $DOCKERHUB_USERNAME/$IMAGE_NAME:latest